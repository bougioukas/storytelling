[
  {
    "objectID": "ridgeline.html",
    "href": "ridgeline.html",
    "title": "Ridgeline chart",
    "section": "",
    "text": "We need to load the following packages:\n\nlibrary(ggridges)\n\nlibrary(here)\nlibrary(tidyverse)\n\nThe chart we are set to recreate, originally obtained from Meta-Research: Tracking the popularity and outcomes of all bioRxiv preprints.\nFirst, we import the data timeframe in R:\n\nlibrary(readxl)\ntimeframe &lt;- read_excel(here(\"data\", \"timeframe.xlsx\"))\n\nstr(timeframe)\n\ntibble [7,653 × 3] (S3: tbl_df/tbl/data.frame)\n $ id      : num [1:7653] 2967 8845 16624 18517 24519 ...\n $ interval: num [1:7653] 1312 1113 1051 1045 936 ...\n $ journal : chr [1:7653] \"PeerJ\" \"Nucleic Acids Research\" \"Journal of Neuroscience\" \"PeerJ\" ...\n\n\n\ncolor1 = '#9977ff'\ncolor2 = '#5a23ff'\n\nggplot(timeframe, aes(\n  x=interval,\n  y=reorder(journal, interval, FUN=median),\n  fill=reorder(journal, interval, FUN=median),\n  rel_min_height=0.000000000001\n)) +\n  # Adding \"stat = 'density' means the bandwidth (i.e. bin size)\n  # is calculated separately for each journal, rather than for the\n  # dataset as a whole\n  stat_density_ridges(\n    scale = 2,\n    quantile_lines = TRUE,\n    quantiles = 2\n  ) +\n  scale_fill_cyclical(values=c(color1, color2)) +\n  scale_y_discrete(expand = c(0.01, 0.1)) +\n  scale_x_continuous(\n    expand = c(0.01, 0),\n    breaks=seq(0, 1000, 250),\n  ) +\n  coord_cartesian(xlim=c(0,1000)) +\n  labs(x='Age of preprint at publication (days)', y='Journal (preprint density)') +\n  geom_vline(\n    xintercept=166,\n    col=\"yellow\", linetype=\"dashed\", linewidth=1\n  ) +\n  theme_ridges() +\n  theme_bw()\n\nPicking joint bandwidth of 32.5\n\n\n\n\n\n\n\nFigure 1: Final chart\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "projects2.html#project-2",
    "href": "projects2.html#project-2",
    "title": "Projects",
    "section": "Project 2",
    "text": "Project 2"
  },
  {
    "objectID": "projects2.html#project-3",
    "href": "projects2.html#project-3",
    "title": "Projects",
    "section": "Project 3",
    "text": "Project 3"
  },
  {
    "objectID": "line.html",
    "href": "line.html",
    "title": "Line chart",
    "section": "",
    "text": "Used geometries\n\n\n\nMain geometry:\n\ngeom_line\n\nSecondary geometries:\n\ngeom_point\ngeom_text_repel\ngeom_abline\ngeom_segment\ngeom_star\n\n\n\nWe need to load the following packages:\n\nlibrary(ggrepel)\nlibrary(ggtext)\nlibrary(ggstar)\nlibrary(ggnewscale)\n\nlibrary(here)\nlibrary(tidyverse)\n\nWe load the file covid_data.csv in R.\n\nlibrary(readr)\ncovid_data &lt;- read_csv(\"data/covid_data.csv\", col_types = cols(date = col_date(format = \"%m/%d/%Y\"))) \n\nhead(covid_data)\n\n# A tibble: 6 × 14\n  iso3c country date       confirmed deaths recovered total_tests region  income\n  &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;         &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; \n1 ABW   Aruba   2020-03-13        NA     NA        NA          NA Latin … High …\n2 ABW   Aruba   2020-03-14        NA     NA        NA          NA Latin … High …\n3 ABW   Aruba   2020-03-15        NA     NA        NA          NA Latin … High …\n4 ABW   Aruba   2020-03-16        NA     NA        NA          NA Latin … High …\n5 ABW   Aruba   2020-03-17        NA     NA        NA          NA Latin … High …\n6 ABW   Aruba   2020-03-18        NA     NA        NA          NA Latin … High …\n# ℹ 5 more variables: population &lt;dbl&gt;, pop_density &lt;dbl&gt;,\n#   life_expectancy &lt;dbl&gt;, gdp_capita &lt;dbl&gt;, timestamp &lt;dttm&gt;\n\n\nLet’s have a look at the types of variables:\n\nglimpse(covid_data)\n\nRows: 132,236\nColumns: 14\n$ iso3c           &lt;chr&gt; \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\", \"ABW\"…\n$ country         &lt;chr&gt; \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", \"Aruba\", …\n$ date            &lt;date&gt; 2020-03-13, 2020-03-14, 2020-03-15, 2020-03-16, 2020-…\n$ confirmed       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ deaths          &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ recovered       &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ total_tests     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ region          &lt;chr&gt; \"Latin America & Caribbean\", \"Latin America & Caribbea…\n$ income          &lt;chr&gt; \"High income\", \"High income\", \"High income\", \"High inc…\n$ population      &lt;dbl&gt; 106766, 106766, 106766, 106766, 106766, 106766, 106766…\n$ pop_density     &lt;dbl&gt; 593.1444, 593.1444, 593.1444, 593.1444, 593.1444, 593.…\n$ life_expectancy &lt;dbl&gt; 76.293, 76.293, 76.293, 76.293, 76.293, 76.293, 76.293…\n$ gdp_capita      &lt;dbl&gt; 26631.47, 26631.47, 26631.47, 26631.47, 26631.47, 2663…\n$ timestamp       &lt;dttm&gt; 2021-10-09 02:10:32, 2021-10-09 02:10:32, 2021-10-09 …\n\n\nThe data frame contains 132236 rows and 14 variables. There are 8 numeric variables, 4 variables of character type, and 2 variables with dates (one of date type and the other of dttm type):\n\n\niso3c: ISO3c country code as defined by ISO 3166-1 alpha-3\n\ncountry: Country name\n\ndate: Calendar date\n\nconfirmed: Confirmed Covid-19 cases as reported by JHU CSSE (accumulated)\n\ndeaths: Covid-19-related deaths as reported by JHU CSSE (accumulated)\n\nrecovered: Covid-19 recoveries as reported by JHU CSSE (accumulated)\n\ntotal_tests: Accumulated test counts as reported by Our World in Data\n\nregion: Country region as classified by the World Bank (time-stable)\n\nincome: Country income group as classified by the World Bank (time-stable)\n\npopulation: Country population as reported by the World Bank (original identifier ‘SP.POP.TOTL’, time-stable)\n\npop_density: Country population density as reported by the World Bank (original identifier ‘EN.POP.DNST’, time-stable)\n\nlife_expectancy Average life expectancy at birth of country citizens in years as reported by the World Bank (original identifier ‘SP.DYN.LE00.IN’, time-stable)\n\ngdp_capita: Country gross domestic product per capita, measured in 2010 US-$ as reported by the World Bank (original identifier ‘NY.GDP.PCAP.KD’, time-stable)\n\ntimestamp: Date and time where data has been collected from authoritative sources\n\nThe data cover a period from 2019-12-31 to 2021-10-07.\n\nfocus_cn &lt;- c(\"AUS\", \"BEL\", \"BRA\",\"CAN\",\"CHN\", \"FRA\", \"DEU\",\"GBR\",\n              \"IND\", \"IRN\", \"IRL\",\"JPN\",\"ITA\", \"NLD\", \"KOR\",\n               \"ESP\", \"USA\")\n\ncovid_deaths &lt;- covid_data %&gt;%\n  select(date, country, iso3c, deaths) %&gt;%\n  group_by(iso3c) %&gt;%\n  arrange(date) %&gt;%\n  filter(deaths &gt; 9, date &lt; \"2020-04-09\") %&gt;%\n  mutate(days_elapsed = date - min(date),\n         end_label = ifelse(date == max(date), country, NA),\n         end_label = case_when(iso3c %in% focus_cn ~ end_label,\n                      TRUE ~ NA_character_),\n         cgroup = case_when(iso3c %in% focus_cn ~ country,\n                   TRUE ~ \"OTHER\")) %&gt;% \n  filter(days_elapsed &lt; 45) |&gt; \n  ungroup()\n\nWe also set particular colors for the selected countries:\n\n# Colors\n\ncgroup_cols &lt;- c(\"gray70\", \"gray70\", \"gray70\", \"gray70\", \n                 \"#F69E2F\", \"#268EC1\",\"gray70\",\"gray70\",\n                 \"gray60\", \"gray70\", \"gray30\",\"#7CD6D7\",\n                 \"gray70\",\"#7CD6D7\",\"#298DC3\", \"#B82E5D\", \n                 \"#EC5B8F\")\n\n\n# stars\ndf_stars &lt;- data.frame(\n  x_star = c(6.8, 9.7, 10.2, 15, 7.5, 6.5, 2.2, 0.25),\n  y_star = c(200, 145, 385, 800, 120, 55, 30, 10),\n  group_star = c(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"e\", \"d\")\n)\n\ncgroup_cols2 &lt;- c(\"#268EC1\", \"#B82E5D\", \"gray30\", \"gray60\", \"#F69E2F\")\n\n\n# line annotations\ndf_lines &lt;- data.frame(\n  x = c(10, 22, 35, 35),\n  y = c(10^4, 2.5*10^4, 3.3*10^4, 350),\n  labels = c(\"DEATHS DOUBLE \\n EVERY DAY\", \"...EVERY \\n 2 DAYS\",\n            \"...EVERY \\n 3 DAYS\", \"...EVERY WEEK\")\n)\n\n\ndeath_log_curves &lt;- covid_deaths %&gt;% filter(cgroup != \"OTHER\") %&gt;% \n  ggplot(mapping = aes(x = days_elapsed, y = deaths,\n                       color = cgroup, label = end_label,\n                       group = iso3c)) +\n  geom_line(size = 1.2) +\n  geom_point(data = covid_deaths |&gt; \n               dplyr::group_by(cgroup) |&gt; filter(days_elapsed==max(days_elapsed),\n                                                 cgroup != \"OTHER\"),\n             aes(x = days_elapsed, y = deaths, fill = cgroup), shape = 21, \n             size = 3.3, stroke = 1.0, color = \"grey30\") +\n  geom_text_repel(nudge_x = 0.2,\n                  nudge_y = 0.1, size = 4,\n                  segment.color = NA) +\n  scale_color_manual(values = cgroup_cols) +\n  scale_fill_manual(values = cgroup_cols) +  \n  geom_abline(intercept = log10(10), slope = log10(1.42), linetype = \"dashed\", color = \"gray\", linewidth = 0.8) +\n  geom_abline(intercept = log10(10), slope = log10(1.26), linetype = \"dashed\", color = \"gray\", linewidth = 0.8) +\n  geom_abline(intercept = log10(10), slope = log10(1.105), linetype = \"dashed\", color = \"gray\", linewidth = 0.8) +\n  geom_segment(aes(x = 0, y = 10,\n                   xend = 10, yend = 10000), linetype = \"dashed\", color = \"gray\", linewidth = 0.8) + \n  new_scale_fill() +\n  geom_star(data = df_stars, aes(x = x_star, y = y_star, fill = group_star), starstroke = 0.9, size = 3.5, inherit.aes = F) +\n  scale_fill_manual(values = cgroup_cols2) +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_log10(\n    label = scales::comma, sec.axis = dup_axis(), limits = c(10, 33000),\n    breaks = c(10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000, 20000)) +\n  labs(x = \"Number of days Since 10th death →\",\n       title = \"Coronavirus deaths in Italy, Spain, the UK and US are increasing more rapidly than they did in China\",\n       subtitle = \"Cumulative number of deaths, by number of days since 10th deaths \\n \\ \\ \\ \\ Stars represent national lockdowns *\",\n       caption = \"Data: https://coronavirus.jhu.edu/map.html\") +\n  theme(panel.background = element_rect(fill = \"#FFF1E6\"),\n        plot.background = element_rect(fill = \"#FFF1E6\"),\n        panel.grid.major = element_line(color = \"#EEE0D5\"),\n        panel.grid.minor = element_blank(),\n        plot.title = element_text(size = 16, hjust = -0.95),\n        plot.subtitle = element_text(size = 13, hjust = -0.11, color = \"grey30\"),\n        axis.title.y = element_blank(),\n        axis.text = element_text(size = 12),\n        axis.ticks = element_blank(),\n        legend.position = \"none\"\n        ) +\n  annotate(\"text\", x = df_lines$x, y = df_lines$y, label = df_lines$labels, color = \"grey50\") +\n  annotate(\"text\", x = 43, y = 2.5*1000, label = \"China\", color = \"#F69E2F\")\n\ndeath_log_curves\n\n\n\n\n\n\nFigure 1: Final chart\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "drc.html",
    "href": "drc.html",
    "title": "Dose-response curves",
    "section": "",
    "text": "The chart we are set to recreate, originally obtained from the article “The discriminatory power of the T cell receptor” (doi: 10.7554/eLife.67092) published in eLife, stands as a prime example of a dose-response curves chart.\n\n\n\n\n\nORIGINAL CHART: Example dose-responses for naïve T cells.\nA dose-response curves chart is a graphical representation used in various scientific fields, including pharmacology, toxicology, and environmental science, to illustrate the association between the dose of a substance and the response it elicits in a biological system. The x-axis typically represents the dose or concentration of the substance administered, while the y-axis represents the magnitude of the response.\n\n\n\n\n\n\n\n\n\n\n\nUsed geometries\n\n\n\nMain geometries:\n\ngeom_line()\ngeom_point()\n\nSecondary geometries:\n\ngeom_text()\ngeom_hline()\n\n\n\nWe need to load the following packages:\n\nlibrary(drc)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(broom)\nlibrary(ggtext)\n\nWe load the file drc.xlsx in R.\n\nlibrary(readxl)\ndrc &lt;- read_excel(\"data/drc.xlsx\")\n\nhead(drc)\n\n# A tibble: 6 × 49\n    dose NYE9V1 NYE6V1 NYE3Y1 NYE6T1 NYE4D1 NYE4A1 NYE5Y1 NYE5F1 NYE9V2 NYE6V2\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 125      95     95.6   92     95.5   89.5   55.3   89.6   91.3   83.9   78.5\n2  25      96.9   96.3   95.3   94.8   91.5   65.5   85.1   81.5   86.4   79.8\n3   5      96.9   97     95.2   95.8   92.1   50     89.8   74.4   86.7   83.2\n4   1      97.7   95.9   94.8   95.3   91     46.9   86     53.9   82.2   84.7\n5   0.2    96.7   96.4   95     94.2   89     41.3   74.8   41.4   84.4   80.9\n6   0.04   97.4   94.9   92.5   91.9   85.7   35.7   44.7   36.0   70.1   67.3\n# ℹ 38 more variables: NYE3Y2 &lt;dbl&gt;, NYE6T2 &lt;dbl&gt;, NYE4D2 &lt;dbl&gt;, NYE4A2 &lt;dbl&gt;,\n#   NYE5Y2 &lt;dbl&gt;, NYE5F2 &lt;dbl&gt;, NYE9V3 &lt;dbl&gt;, NYE6V3 &lt;dbl&gt;, NYE3Y3 &lt;dbl&gt;,\n#   NYE6T3 &lt;dbl&gt;, NYE4D3 &lt;dbl&gt;, NYE4A3 &lt;dbl&gt;, NYE5Y3 &lt;dbl&gt;, NYE5F3 &lt;dbl&gt;,\n#   NYE9V4 &lt;dbl&gt;, NYE6V4 &lt;dbl&gt;, NYE3Y4 &lt;dbl&gt;, NYE6T4 &lt;dbl&gt;, NYE4D4 &lt;dbl&gt;,\n#   NYE4A4 &lt;dbl&gt;, NYE5Y4 &lt;dbl&gt;, NYE5F4 &lt;dbl&gt;, NYE9V5 &lt;dbl&gt;, NYE6V5 &lt;dbl&gt;,\n#   NYE3Y5 &lt;dbl&gt;, NYE6T5 &lt;dbl&gt;, NYE4D5 &lt;dbl&gt;, NYE4A5 &lt;dbl&gt;, NYE5Y5 &lt;dbl&gt;,\n#   NYE5F5 &lt;dbl&gt;, NYE9V6 &lt;dbl&gt;, NYE6V6 &lt;dbl&gt;, NYE3Y6 &lt;dbl&gt;, NYE6T6 &lt;dbl&gt;, …\n\n\n\ndrc_tidy &lt;- drc |&gt; \n  pivot_longer(cols = -dose,\n               names_to = \"sample\",\n               values_to = \"response\") |&gt; \n  mutate(\n    condition = str_sub(sample, 1, 5),\n    replicate = str_sub(sample, 6, 6)\n  )\n\n\ndrc_per_condition &lt;- drc_tidy |&gt; \n  group_by(dose, condition) |&gt; \n  summarize(\n    #sem = sd(response)/sqrt(n()),\n            response = mean(response)\n            )\n\n\nmodel &lt;- drm(data = drc_tidy,\n             formula = response ~ dose,\n             curveid = condition,\n             fct = LL.4(names = c(\"Hill slope\", \"Min\", \"Max\", \"EC50\")))  \n\n\npredicted_data &lt;- data.frame(\n  dose = rep(drc$dose, times = 8),\n  condition = rep(c(\"NYE9V\", \"NYE6V\", \"NYE3Y\", \"NYE6T\", \n                    \"NYE4D\", \"NYE4A\", \"NYE5Y\", \"NYE5F\"), \n                  each = nrow(drc))\n  \n)\n\npredicted_data$prediction &lt;- predict(model, newdata = predicted_data)\n\n\n\ndrc_per_condition &lt;- drc_per_condition |&gt; \n  mutate(condition = factor(condition, levels =  c(\"NYE9V\", \"NYE6V\", \"NYE3Y\", \n                                                   \"NYE6T\", \"NYE4D\", \"NYE4A\", \n                                                   \"NYE5Y\", \"NYE5F\"),\n                            labels =  c(\"NYE 9V\", \"NYE 6V\", \"NYE 3Y\", \n                                        \"NYE 6T\", \"NYE 4D\", \"NYE 4A\", \n                                        \"NYE 5Y\", \"NYE 5F\"))\n         )\n\n\npredicted_data &lt;- predicted_data |&gt; \n  mutate(condition = factor(condition, levels =  c(\"NYE9V\", \"NYE6V\", \"NYE3Y\", \n                                                   \"NYE6T\", \"NYE4D\", \"NYE4A\", \n                                                   \"NYE5Y\", \"NYE5F\"),\n                            labels =  c(\"NYE 9V\", \"NYE 6V\", \"NYE 3Y\", \n                                        \"NYE 6T\", \"NYE 4D\", \"NYE 4A\", \n                                        \"NYE 5Y\", \"NYE 5F\"))\n         )\n\nWe also set particular colors for the selected countries:\n\n# Colors\n\nmy_colors &lt;- c(\"#E81B67\", \"#F5921C\", \"#6E4C9F\", \"#97CB62\",\n               \"#6BD2C7\", \"#3D78C7\", \"#3D78c7\", \"#3952A4\", \"#2B267C\")\n\n\ndrc_per_condition |&gt; \n  ggplot(aes(x = log10(dose), y = response, color = condition)) + \n  geom_point(size = 3) +\n  geom_line(data = predicted_data, linewidth = 1.3, show.legend = FALSE,\n            aes(x = log10(dose), y = prediction)) +\n  geom_hline(yintercept = 15, col=\"grey20\", linetype=\"dotted\", linewidth = 0.8\n  ) +\n  scale_y_continuous(\n    limits = c(0, 115), \n    breaks = seq(0, 100, 50),\n    minor_breaks = seq(0, 115, 10)\n  ) +\n  scale_x_continuous(\n    limits = c(-6, 3), \n    breaks = -6:3,\n    expand = c(0,0),\n    minor_breaks = log10(rep(1:9, 7)*(10^rep(-10:3, each = 9))),\n    labels = function(lab) {\n      do.call(\n        expression,\n        lapply(paste(lab), function(x) bquote(\"10\"^.(x)))\n      )\n    }\n  ) +\n  guides(x = guide_axis(minor.ticks = TRUE),\n         y = guide_axis(minor.ticks = TRUE),\n         color = guide_legend(override.aes = list(size = 3.5))\n         ) +\n  scale_color_manual(\n    labels = paste(\"&lt;span style='color:\",\n                                   my_colors,\n                                   \"'&gt;\",\n                   levels(drc_per_condition$condition),\n                                   \"&lt;/span&gt;\"),\n    values = my_colors) +\n  annotate(\"text\", x = log(10^-2.45), y = 20, size = 6,\n           label = expression(\"P\"[\"15\"]), color = \"grey20\") +\n  annotate(\"text\", x = log(10^-2.55), y = 110, hjust = 0, size = 6,\n           label = \"1G-4 electroporated \\nnaïve T cells\", color = \"grey20\") +\n  labs(x = \"Peptide (μΜ)\", y = \"Normalised \\nCD69-positive cells (%)\",\n       tag = \"B\") +\n  theme(panel.background = element_blank(),\n        axis.title = element_text(size = 18),\n        axis.text = element_text(size = 16),\n        axis.line = element_line(color=\"black\", linewidth = 0.7),\n        axis.ticks.length = unit(10, \"pt\"),\n        axis.minor.ticks.length = rel(0.5),\n        axis.ticks = element_line(size = 0.9),\n        legend.title = element_blank(),\n        legend.text = element_markdown(size = 16),\n        legend.key.size = unit(1.1, \"cm\"),\n        legend.key.width = unit(0.9,\"cm\"),\n        legend.margin = margin(l = -0.8, b = -1.45, unit = \"cm\"),\n        plot.tag = element_text(size = 40),\n        plot.tag.position = c(0.01, 0.96)\n        )\n\n\n\n\n\n\nFigure 1\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "area.html",
    "href": "area.html",
    "title": "Area chart",
    "section": "",
    "text": "The chart we are set to recreate, originally obtained from Our World in Data, stands as a prime example of an area chart."
  },
  {
    "objectID": "area.html#story-cocoa-bean-production-by-region",
    "href": "area.html#story-cocoa-bean-production-by-region",
    "title": "Area chart",
    "section": "STORY: Cocoa bean production by region",
    "text": "STORY: Cocoa bean production by region\nThe cocoa bean, also referred to as cocoa, is the dried and fully fermented fatty seed of Theobroma cacao, from which cocoa solids and cocoa oil are extracted. The “beans” are the essential ingredient for chocolate and cacao products. Products received from cocoa beans are not only used in chocolates, but also in a wide range of food products.\n\n\n\n\n\n\n Cocoa bean production by region: Africa, Asia, South America, North America, and Oceania\n\n\n\nHere’s a general breakdown of cocoa bean production by region:\n\n\nAfrica:\n\nAfrica is the largest producer of cocoa beans, accounting for a significant majority of the world’s production.\nThe leading cocoa-producing countries in Africa include Ivory Coast (Côte d’Ivoire), Ghana, Nigeria, and Cameroon.\nIvory Coast and Ghana are particularly dominant in global cocoa production, collectively contributing a substantial portion of the world’s cocoa output.\n\n\n\nAsia:\n\nIndonesia is a major producer of cocoa beans in Asia.\nOther countries in Asia, such as Malaysia and the Philippines, also contribute to cocoa production, although their output may be comparatively smaller than African countries.\n\n\n\nSouth America:\n\nSouth America is another significant region for cocoa production.\nThe leading cocoa-producing country in South America is Ecuador, followed by countries like Brazil and Peru.\n\n\n\nNorth America:\n\nCocoa is not native to North America, so the region doesn’t play a major role in global cocoa production.\nHowever, some countries in Central America, such as the Dominican Republic and Mexico, do produce cocoa to a certain extent.\n\n\n\nOceania:\n\nOceania has limited cocoa production compared to other regions.\nPapua New Guinea is one of the countries in Oceania that contributes to global cocoa production.\n\n\n\nCocoa production is influenced by factors such as climate, soil conditions, and economic considerations. The industry also faces challenges related to sustainability, fair trade practices, and environmental concerns."
  },
  {
    "objectID": "area.html#geometries",
    "href": "area.html#geometries",
    "title": "Area chart",
    "section": "GEOMETRIES",
    "text": "GEOMETRIES\n\n\n\n\n\n\n Used geometries\n\n\n\nMain geometry:\n\ngeom_area()\n\nSecondary geometries:\n\ngeom_text()\ngeom_linerange()"
  },
  {
    "objectID": "area.html#step-by-step-chart-recreation",
    "href": "area.html#step-by-step-chart-recreation",
    "title": "Area chart",
    "section": "\n: STEP-BY-STEP CHART RECREATION",
    "text": ": STEP-BY-STEP CHART RECREATION\nSTEP 0: Packages and data preparation\nFirst, we load the necessary packages and fonts.\n\n# load packages\nlibrary(ggtext)\nlibrary(showtext)\nlibrary(here)\nlibrary(tidyverse)\n\n# load custom fonts\nfont_add_google(\"Playfair Display\", regular.wt = 400)\nshowtext_auto()\n\n\n\n\n\n\n\n\n DATA SOURCE\n\n\n\nFood and Agriculture Organization of the United Nations (2023) – processed by Our World in Data. Additionally, we filtered the dataset, keeping the following world regions (entities): Africa, Asia, South America, North America, and Oceania).\n\n\nThen we import the dat_cocoa in R.\n\nlibrary(readxl)\ndat_cocoa &lt;- read_excel(here(\"data\", \"dat_cocoa.xlsx\"))\n\nstr(dat_cocoa)\n\ntibble [305 × 3] (S3: tbl_df/tbl/data.frame)\n $ region     : chr [1:305] \"Africa\" \"Africa\" \"Africa\" \"Africa\" ...\n $ year       : num [1:305] 1961 1962 1963 1964 1965 ...\n $ cocoa_beans: num [1:305] 835368 867170 922621 1190061 874245 ...\n\n\n\ndat_cocoa &lt;- dat_cocoa |&gt; \n  mutate(region = factor(region, \n                         levels = c(\"Oceania\",\"North America\", \n                                    \"South America\", \"Asia\",\"Africa\")))\n\nWe also create a color set:\n\n# Custom color palette\nmy_colors &lt;- c(\"#AE7253\", \"#EA8B7B\",\"#A05961\",\"#339D98\",\"#B577B0\")\n\n\nfinal_dat &lt;- dat_cocoa |&gt;  \n  filter(year==\"2021\") |&gt;   # Keep only 2021 value\n  arrange(desc(region)) |&gt;                 # Inverse factor order (first is at the bottom of plot)\n  mutate(                              # Create new column ypos and\n    ypos=cumsum(cocoa_beans) - 0.5 * cocoa_beans      # fill with cumulative sum of invest for 2017\n  )                                     \n\nfinal_dat$ypos[4] &lt;- 5350000\n\n\ndf &lt;- data.frame(\n  y = seq(10^6, 5*10^6, by = 10^6),\n  xmin = rep(1961, 5),\n  xmax = rep(2021, 5)\n)"
  },
  {
    "objectID": "area.html#step-1-create-a-basic-area-chart",
    "href": "area.html#step-1-create-a-basic-area-chart",
    "title": "Area chart",
    "section": "STEP 1: Create a basic area chart",
    "text": "STEP 1: Create a basic area chart\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area()\n\n\n\n\n\n\n\nThe aes function is used to map the variables to the aesthetics of the plot, and geom_area is used to create the area plot."
  },
  {
    "objectID": "area.html#step-2-set-new-colors-to-the-areas",
    "href": "area.html#step-2-set-new-colors-to-the-areas",
    "title": "Area chart",
    "section": "STEP 2: Set new colors to the areas",
    "text": "STEP 2: Set new colors to the areas\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  scale_fill_manual(values = my_colors)"
  },
  {
    "objectID": "area.html#step-3-remove-the-legend-and-display-the-continents-name-next-to-the-corresponding-area",
    "href": "area.html#step-3-remove-the-legend-and-display-the-continents-name-next-to-the-corresponding-area",
    "title": "Area chart",
    "section": "STEP 3: Remove the legend and display the continent’s name next to the corresponding area",
    "text": "STEP 3: Remove the legend and display the continent’s name next to the corresponding area\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  geom_text(data = final_dat, aes(max(dat_cocoa$year) + 0.3, y = ypos, label = region, color = region),\n            size = 7, hjust = 0) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "area.html#step-4-change-the-labels-of-the-axes-and-add-extra-space-on-the-x-axis",
    "href": "area.html#step-4-change-the-labels-of-the-axes-and-add-extra-space-on-the-x-axis",
    "title": "Area chart",
    "section": "STEP 4: Change the labels of the axes and add extra space on the x-axis",
    "text": "STEP 4: Change the labels of the axes and add extra space on the x-axis\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  geom_text(data = final_dat, aes(max(dat_cocoa$year) + 0.3, y = ypos, label = region, color = region),\n            size = 7, hjust = 0) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) +\n  scale_x_continuous(breaks = c(1961, 1970, 1980, 1990, 2000, 2010, 2021), \n                     labels = c(1961, 1970, 1980, 1990, 2000, 2010, 2021)) +\n  scale_y_continuous(labels = scales::comma_format(scale = 1e-6, suffix = \" million t\")) +\n  coord_cartesian(xlim = c(1960, 2030), expand = FALSE) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "area.html#step-5-add-title-subtitle-and-caption",
    "href": "area.html#step-5-add-title-subtitle-and-caption",
    "title": "Area chart",
    "section": "STEP 5: Add title, subtitle, and caption",
    "text": "STEP 5: Add title, subtitle, and caption\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  geom_text(data = final_dat, aes(max(dat_cocoa$year) + 0.3, y = ypos, label = region, color = region),\n            size = 7, hjust = 0) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) +\n  scale_x_continuous(breaks = c(1961, 1970, 1980, 1990, 2000, 2010, 2021), \n                     labels = c(1961, 1970, 1980, 1990, 2000, 2010, 2021)) +\n  scale_y_continuous(labels = scales::comma_format(scale = 1e-6, suffix = \" million t\")) +\n  coord_cartesian(xlim = c(1960, 2030), expand = FALSE) +\n  labs(title = \"Cocoa bean production by region, 1961 to 2021\",\n       subtitle = \"Global production of cocoa beans, measured in tonnes of production per year.\", \n       caption = \"Data source: Food and Agriculture Organization of the United Nations\") +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "area.html#step-6-fine-tune-the-charts-theme",
    "href": "area.html#step-6-fine-tune-the-charts-theme",
    "title": "Area chart",
    "section": "STEP 6: Fine-tune the chart’s theme",
    "text": "STEP 6: Fine-tune the chart’s theme\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  geom_text(data = final_dat, aes(max(dat_cocoa$year) + 0.3, y = ypos, label = region, color = region),\n            size = 7, hjust = 0) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) +\n  scale_x_continuous(breaks = c(1961, 1970, 1980, 1990, 2000, 2010, 2021), \n                     labels = c(1961, 1970, 1980, 1990, 2000, 2010, 2021)) +\n  scale_y_continuous(labels = scales::comma_format(scale = 1e-6, suffix = \" million t\")) +\n  coord_cartesian(xlim = c(1960, 2030), expand = FALSE) +\n  labs(title = \"Cocoa bean production by region, 1961 to 2021\",\n       subtitle = \"Global production of cocoa beans, measured in tonnes of production per year.\", \n       caption = \"Data source: Food and Agriculture Organization of the United Nations\") +\n  theme(panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.text = element_text(color = \"grey30\", size = 20, margin = margin(t = 4)),\n        axis.ticks.y = element_blank(),\n        axis.ticks.length.x = unit(0.05,\"inch\"),\n        axis.ticks.x = element_line(color = \"grey30\"),\n        plot.title = element_text(family = \"Playfair Display\",\n                                  color = \"grey20\", size = 37, hjust = -0.15),\n        plot.subtitle = element_text(margin = margin(b = 15),\n                                     color = \"grey30\", size = 21, hjust = -0.15),\n        legend.position = \"none\")"
  },
  {
    "objectID": "area.html#step-7-add-a-second-caption-and-horizontal-dotted-grid-lines",
    "href": "area.html#step-7-add-a-second-caption-and-horizontal-dotted-grid-lines",
    "title": "Area chart",
    "section": "STEP 7: Add a second caption and horizontal dotted grid lines",
    "text": "STEP 7: Add a second caption and horizontal dotted grid lines\n\nggplot(dat_cocoa, aes(x = year, y = cocoa_beans, fill = region)) +\n  geom_area() +\n  geom_text(data = final_dat, aes(max(dat_cocoa$year) + 0.3, y = ypos, label = region, color = region),\n            size = 7, hjust = 0) +\n  geom_linerange(data = df, aes(y = y, xmin = xmin, xmax = xmax), \n                 color = \"grey35\", linetype = \"dotted\", inherit.aes = F, alpha = 0.50) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) +\n  scale_x_continuous(breaks = c(1961, 1970, 1980, 1990, 2000, 2010, 2021), \n                     labels = c(1961, 1970, 1980, 1990, 2000, 2010, 2021)) +\n  scale_y_continuous(labels = scales::comma_format(scale = 1e-6, suffix = \" million t\")) +\n  coord_cartesian(xlim = c(1960, 2030), expand = FALSE) +\n  labs(title = \"Cocoa bean production by region, 1961 to 2021\",\n       subtitle = \"Global production of cocoa beans, measured in tonnes of production per year.\", \n       caption = \"**Data source:** Food and Agriculture Organization of the United Nations\",\n       x = \"OurWorldInData.org/agricultural-production | CC BY\") +\n  theme(panel.background = element_blank(),\n        panel.grid = element_blank(),\n        axis.title.x = element_text(size = 19, hjust = 1, margin = margin(t = 25)),\n        axis.title.y = element_blank(),        \n        axis.text = element_text(color = \"grey30\", size = 20, margin = margin(t = 4)),\n        axis.ticks.y = element_blank(),\n        axis.ticks.length.x = unit(0.05,\"inch\"),\n        axis.ticks.x = element_line(color = \"grey30\"),\n        plot.title = element_text(family = \"Playfair Display\",\n                                  color = \"grey20\", size = 37, hjust = -0.15),\n        plot.subtitle = element_text(margin = margin(b = 15),\n                                     color = \"grey30\", size = 21, hjust = -0.15),\n        plot.caption = element_markdown(color = \"grey30\", size = 19, \n                                        hjust= -0.12, margin = margin(t = -12)),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\nStorytelling with the chart\n\n\nThis visualization offers a thorough and comprehensive insight into the evolving trends of cocoa bean production across various regions spanning the last six decades. Through the use of the area chart, the visualization effectively captures the fluctuations and distribution of cocoa production over time, allowing viewers to discern patterns and variations in different geographical areas. Specifically, from 1960 to 2021, world production rose, reaching more than 5.5 million tonnes. Cocoa production varies significantly by continent, with Africa leading global production. Asia has also played a significant role in cocoa production since 1980, while South America contributes substantially to the global cocoa market as well, known for its high-quality beans."
  },
  {
    "objectID": "dot.html",
    "href": "dot.html",
    "title": "Dot plot",
    "section": "",
    "text": "The original graph obtained from Office for National Statistics analysis using Longitudinal Education Outcomes (LEO) from the Department for Education (DfE)\n\n\nlibrary(ggdist)\n\nlibrary(tidyverse)      # Data Wrangling and Plotting\nlibrary(here)           # Files location and loading\n\n\n# Option 1: tidytuesdayR package \n\n#tuesdata &lt;- tidytuesdayR::tt_load('2024-01-23')\nenglish_education &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-23/english_education.csv')\n#english_education &lt;- tuesdata$english_education\n\n\n# Define Text Size\nts = unit(20, units = \"cm\")   \n\n\ncity_levels &lt;- c(\"Small Towns\", \"Medium Towns\", \"Large Towns\", \"Cities\", \"London\")\n\n\ndf &lt;- english_education |&gt; \n  # Add populations of Inner and Outer London\n  mutate(\n    population_2011 = case_when(\n      town11nm == \"Outer london BUAs\" ~ 4942040,\n      town11nm == \"Inner London BUAs\" ~ 3231901,\n      .default = population_2011\n    )\n  ) |&gt; \n  mutate(\n    size_flag = case_when(\n      size_flag == \"City\" ~ \"Cities\",\n      size_flag %in% c(\"Inner London BUA\", \"Outer london BUA\") ~ \"London\",\n      .default = size_flag\n    )\n  ) |&gt; \n  filter(\n    size_flag %in% city_levels\n  ) |&gt; \n  mutate(\n    size_flag = factor(size_flag, levels = city_levels, labels = c(\"Small towns\", \"Medium towns\", \"Large towns\", \"City (excluding London)\", \"London\")),\n    size_flag = fct_rev(size_flag)\n  )\n\n# mean educational attainment scores\ndf1 &lt;- df |&gt; \n  group_by(size_flag) |&gt; \n  summarise(\n    mean_ed_score = mean(education_score, na.rm = T)\n  ) |&gt; \n  filter(size_flag!=\"London\") |&gt; \n  add_column(y = c(1.6, 2.6, 3.6, 4.6), yend = c(2.4, 3.4, 4.4, 5.4))\n  \n\n# Overall weighted mean Educational Attainment Score for UK\nuk_mean &lt;- df |&gt; \n  summarize(\n    uk_mean = mean(education_score)\n  ) |&gt; \n  as_vector() |&gt; \n  unname()\n\n# Adding names of cities for labels\nlabel_cities &lt;- c(\"Outer London\", \"Inner London\")\ndf_match &lt;- tibble(town_name = label_cities)\n\ndf2 &lt;- df |&gt; \n  mutate(\n    town_name = str_remove_all(town11nm, \" BUA\"),\n    town_name = str_remove_all(town_name, \"SD\"),\n    town_name = case_when(\n      town_name == \"Inner Londons\" ~ \"Inner London\",\n      town_name == \"Outer londons\" ~ \"Outer London\"\n    )\n  ) |&gt;\n  filter(town_name %in% label_cities)\n\n\nggplot(data = df, aes(x = education_score, y = size_flag), ) +\n  geom_dots(smooth = smooth_discrete(kernel = \"epanechnikov\"), \n            stackratio = 0.8, side = \"both\", layout = \"swarm\",\n            slab_shape = 21,  slab_color = \"#27A0CC\", slab_fill = \"#27A0CC\", scale = 0.65, binwidth = unit(c(1.6, Inf), \"mm\")) +\n  geom_text(aes(x = -12.1, y = size_flag, label = size_flag), color = \"grey50\", \n            size= 4.0, vjust = -3.5, hjust = 0) + \n  geom_vline(xintercept = 0, linetype = 1, color = \"grey50\") +\n  geom_text(data = df2, color = \"grey50\", vjust = + 3.5,\n            mapping = aes(x = education_score, y = size_flag,\n                          label = town_name, hjust = case_when(town_name == \"Outer London\" ~ 0, \n                                                               town_name %in% c(\"Inner London\") ~ 1,\n                                                                           .default = 0.5)),\n            vjust = 1.7, size = 0.2 * ts) +\n  scale_x_continuous(\n    minor_breaks = (-10:10), sec.axis = sec_axis(~., name = \"Educational attainment index score\"), position = \"top\"\n  ) +\n  labs(title = \"Smaller towns have the highest average educational attainment\",\n       subtitle = \"Educational attainment score, by town size, England\",\n       x = paste0(\"←----- Lower attainment\", strrep(\" \", 55),  strrep(\" \", 55), \"Higher attainment ----→\"),\n       caption = \"Source: Office for National Statistics analysis using Longitudinal Education Outcomes (LEO)\\nfrom the Department for Education (DfE)\") +\n   annotate(\n    geom = \"curve\",\n    x = -0.6,\n    xend = uk_mean,\n    y = 0.8,\n    yend = 0.95,\n    arrow = arrow(length = unit(2, \"mm\")),\n    curvature = 0.35,\n    color = \"grey50\",\n    linewidth = 0.8\n  ) +\n     annotate(\n    geom = \"curve\",\n    x = 1.5,\n    xend = 1.2,\n    y = 0.8,\n    yend = 0.95,\n    arrow = arrow(length = unit(2, \"mm\")),\n    curvature = - 0.35,\n    color = \"grey50\",\n    linewidth = 0.8\n  ) +\n  annotate(\"segment\", x = df1$mean_ed_score, xend = df1$mean_ed_score, y = df1$y, yend = df1$yend, linewidth = 0.8) +\n  annotate(\"text\", x = 3.2, y = 4.57, label = \"Average for size group\", color = \"grey50\") +\n    annotate(\n    geom = \"curve\",\n    x = uk_mean + 0.7,\n    xend = df1$mean_ed_score[3],\n    y = 4.57,\n    yend = 4.43,\n    curvature = 0.4,\n    color = \"grey50\",\n    linewidth = 0.8\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(plot.margin = margin(0, 95, 0, 0),\n        plot.title = element_text(size = 16),\n        plot.subtitle = element_text(size = 14, color = \"grey50\", margin = margin(t = 10, b = 25)),\n        plot.caption = element_text(size = 14, color = \"grey50\", hjust = 0, margin = margin(t = 25)),\n        axis.title = element_text(color = \"grey50\"),\n        axis.title.x = element_text(size = 12, hjust = 0.9),\n        axis.text = element_text(size = 12, color = \"grey50\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_line(linewidth = 1),\n    axis.text.y = element_blank(),\n    axis.title.y = element_blank())\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What is this website about?",
    "section": "",
    "text": "Imagine having (almost) all types of data visualization tools and techniques seamlessly brought together in one place, creating a comprehensive and unified platform for unlocking insights from your data. This consolidated open access hub allows users to employ diverse visualization methods, from statistical plots to cartograms.\nTHE MAIN IDEA: Step-by-step recreation of published visualizations sourced from scholarly articles, websites, or media sources. All the data visualizations presented in this website are generated using R program. Line-highlighting is employed to accentuate the added code in every step."
  },
  {
    "objectID": "index.html#why-r-for-data-visualization",
    "href": "index.html#why-r-for-data-visualization",
    "title": "What is this website about?",
    "section": "Why R for data visualization?",
    "text": "Why R for data visualization?\nChoosing R for data visualization, particularly when leveraging the grammar of graphics through packages like {ggplot2}, offers several compelling reasons:\n\nR is open source and freely available, making it accessible to a broad of users.\nR, especially with {ggplot2}, is renowned for producing high-quality and publication-ready visualizations.\nThe grammar of graphics provides a systematic and structured approach to data visualization. With {ggplot2} (and its extensions), users can describe the components of a plot using layers, making it easy to create complex visualizations while maintaining code readability.\nR has a vibrant and active user community, including statisticians, data scientists, and methodologists.\nR, with packages like {plotly} and {Shiny}, supports the creation of interactive visualizations."
  },
  {
    "objectID": "projects.html#project-2",
    "href": "projects.html#project-2",
    "title": "Projects",
    "section": "Project 2",
    "text": "Project 2"
  },
  {
    "objectID": "projects.html#project-3",
    "href": "projects.html#project-3",
    "title": "Projects",
    "section": "Project 3",
    "text": "Project 3"
  },
  {
    "objectID": "radial.html",
    "href": "radial.html",
    "title": "Radial bar chart",
    "section": "",
    "text": "The chart we are set to recreate, originally obtained from 1 dataset 100 visualizations website created by Ferdio."
  },
  {
    "objectID": "radial.html#story-unesco-heritage-sites-of-scandinavian-countries",
    "href": "radial.html#story-unesco-heritage-sites-of-scandinavian-countries",
    "title": "Radial bar chart",
    "section": "STORY: UNESCO heritage sites of Scandinavian countries",
    "text": "STORY: UNESCO heritage sites of Scandinavian countries\nThe #79 data visualization on Ferdio’s website is generated from a single dataset detailing the numbers of  UNESCO World Heritage Sites in Scandinavian countries (Sweden, Denmark, and Norway) inscribed before and after 2004, extending up to 2022.\nAccording to properties inscribed on the World Heritage List up to 2022:\nSweden\n\n\n\n\n\n\n(https://whc.unesco.org/en/statesparties/se)\n\n\n\nBefore 2004 (including):\n\nRoyal Domain of Drottningholm (1991)\nBirka and Hovgården (1993)\nEngelsberg Ironworks (1993)\nRock Carvings in Tanum (1994)\nSkogskyrkogården (1994)\nHanseatic Town of Visby (1995)\nChurch Town of Gammelstad, Luleå (1996)\nLaponian Area (1996)\nNaval Port of Karlskrona (1998)\nAgricultural Landscape of Southern Öland (2000)\nHigh Coast / Kvarken Archipelago (2000, 2006)\nMining Area of the Great Copper Mountain in Falun (2001)\nGrimeton Radio Station, Varberg (2004)\n\nAfter 2004:\n\nStruve Geodetic Arc (2005)\nDecorated Farmhouses of Hälsingland (2012)\n\n\n\n\nDenmark\n\n\n\n\n\n\n(https://whc.unesco.org/en/statesparties/dk)\n\n\n\nBefore 2004 (including):\n\nJelling Mounds, Runic Stones and Church (1994)\nRoskilde Cathedral (1995)\nKronborg Castle (2000)\nIlulissat Icefjord (2004)\n\nAfter 2004:\n\nWadden Sea (2009, 2014)\nStevns Klint (2014)\nChristiansfeld, a Moravian Church Settlement (2015)\nThe par force hunting landscape in North Zealand (2015)\nKujataa Greenland: Norse and Inuit Farming at the Edge of the Ice Cap (2017)\nAasivissuit – Nipisat. Inuit Hunting Ground between Ice and Sea (2018)\n\n\n\n\nNorway\n\n\n\n\n\n\n(https://whc.unesco.org/en/statesparties/no)\n\n\n\nBefore 2004 (including):\n\nBryggen (1979)\nUrnes Stave Church (1979)\nRøros Mining Town and the Circumference (1980, 2010)\nRock Art of Alta (1985)\nVegaøyan – The Vega Archipelago (2004)\n\nAfter 2004:\n\nWest Norwegian Fjords – Geirangerfjord and Nærøyfjord (2005)\nStruve Geodetic Arc (2005)\nRjukan-Notodden Industrial Heritage Site (2015)"
  },
  {
    "objectID": "radial.html#geometries",
    "href": "radial.html#geometries",
    "title": "Radial bar chart",
    "section": "GEOMETRIES",
    "text": "GEOMETRIES\n\n\n\n\n\n\n Used geometries\n\n\n\nMain geometry:\n\ngeom_segment()\n\nSecondary geometry:\n\ngeom_text()"
  },
  {
    "objectID": "radial.html#step-by-step-chart-recreation",
    "href": "radial.html#step-by-step-chart-recreation",
    "title": "Radial bar chart",
    "section": "\n: STEP-BY-STEP CHART RECREATION",
    "text": ": STEP-BY-STEP CHART RECREATION\nSTEP 0: Packages and data preparation\nFirst, we load the necessary packages.\n\n# load packages\nlibrary(ggnewscale)\nlibrary(tidyverse)\n\n\nThen we create a dataframe with four columns in R:\n\ndf &lt;- tibble(\n  x = c(8, 10, 15, 5, 4, 13),\n  y = c(1:3, 1:3),\n  country = c(\"Norway\", \"Denmark\", \"Sweden\", \"Norway\", \"Denmark\", \"Sweden\"),\n  group = c(\"group1\", \"group1\", \"group1\", \"group2\", \"group2\", \"group2\")\n)\n\nx: A numeric variable containing the numbers of UNESCO World Heritage Sites. We use these numbers to define the end of the segments on the x-axis.\ny: A numeric variable containing the position of the segment on the y-axis.\ncountry: A character variable containing country names.\ngroup: A character variable containing “group1” and “group2” corresponding to “After 2004” and “Before 2004”, respectively.\n\nWe also create two color sets:\n\n# set the colors\ncols1 &lt;- c(\"#F9BBB3\", \"#7A8092\",  \"#79B0F6\")   # for group1 \ncols2 &lt;- c(\"#EE5440\", \"#283250\", \"#3274D8\")    # for group2\n\n\nSTEP 1: Create a bar chart with segments for “group1”\nWe create a simple horizontal bar graph for the “group1” (After 2004) using geom_segment():\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round')\n\n\n\n\n\n\n\n\nSTEP 2: Add labels and set new colors\nWe add the numbers of UNESCO World Heritage Sites as labels at the end of the bars by incorporating a text-based geometry (geom_text) and we specify a custom color palette by applying the scale_color_manual scale function:\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols1)\n\n\n\n\n\n\n\n\nSTEP 3: Add bars, labels and a second color scale for “group2”\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols1) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) \n\n\n\n\n\n\n\n\nSTEP 4: Set legend guides for each scale\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = \"After 2004\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  guides(color = guide_legend(title = \"Before 2004\"))\n\n\n\n\n\n\n\n\nSTEP 5: Switch to the polar coordinate system and change the legend position\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = \"After 2004\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  guides(color = guide_legend(title = \"Before 2004\")) +\n  coord_polar() + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSTEP 6: Adjust the limits of the axes\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = \"After 2004\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  scale_x_continuous(limits = c(0, 20)) +  \n  scale_y_continuous(expand = expansion(mult = 0.3), limits = c(0, 3)) +\n  guides(color = guide_legend(title = \"Before 2004\")) +\n  coord_polar() + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\nSTEP 7: Add country labels\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x = 0, y, label = country), size = 6, hjust = 1.4) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = \"After 2004\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  scale_x_continuous(limits = c(0, 20)) +  \n  scale_y_continuous(expand = expansion(mult = 0.3), limits = c(0, 3)) +\n  guides(color = guide_legend(title = \"Before 2004\")) +\n  coord_polar() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSTEP 8: Fine-tune the chart’s legend\n\ndf |&gt; \nggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x = 0, y, label = country), size = 6, hjust = 1.4) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = paste0(strrep(\" \", 5), \"After 2004\"),\n                              override.aes = list(size = c(10, 10, 10)),\n                              reverse = TRUE,\n                              keywidth = 1.5, \n                              title.position = \"right\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  scale_x_continuous(limits = c(0, 20)) +  \n  scale_y_continuous(expand = expansion(mult = 0.3), limits = c(0, 3)) +\n  guides(color = guide_legend(title = paste0(strrep(\" \", 5), \"Before 2004\", strrep(\" \", 15)),\n                              reverse = TRUE, override.aes = list(size = c(10, 10, 10)),\n                              keywidth = 1.5, order = 1,\n                              title.position = \"right\")) +\n  coord_polar() +\n  theme(legend.position = \"bottom\",\n        legend.title = element_text(size = 16, color = \"gray50\"),        \n        legend.text = element_blank()\n  )\n\n\n\n\n\n\n\nSTEP 9: Apply final theme adjustments to the chart\n\ndf |&gt; \n  ggplot() +\n  geom_segment(data = filter(df, group == \"group1\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country), \n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  geom_text(data = filter(df, group == \"group1\"), \n            aes(x = 0, y, label = country), size = 6, hjust = 1.4) +\n  scale_color_manual(values = cols1) +\n  guides(color = guide_legend(title = paste0(strrep(\" \", 5), \"After 2004\"),\n                              override.aes = list(size = c(10, 10, 10)),\n                              reverse = TRUE,\n                              keywidth = 1.5, \n                              title.position = \"right\")) +\n  new_scale_color() +\n  geom_segment(data = filter(df, group == \"group2\"), \n               aes(x = 0, xend = x, y = y, yend = y, color = country),\n               linewidth = 10, lineend = 'round') +\n  geom_text(data = filter(df, group == \"group2\"), \n            aes(x, y, label = x), color = \"white\", size = 6) +\n  scale_color_manual(values = cols2) +\n  scale_x_continuous(limits = c(0, 20)) +  \n  scale_y_continuous(expand = expansion(mult = 0.3), limits = c(0, 3)) +\n  guides(color = guide_legend(title = paste0(strrep(\" \", 5), \"Before 2004\", strrep(\" \", 15)),\n                              reverse = TRUE, override.aes = list(size = c(10, 10, 10)),\n                              keywidth = 1.5, order = 1,\n                              title.position = \"right\")) +\n  coord_polar() +\n  theme(panel.background = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"bottom\",\n        legend.title = element_text(size = 16, color = \"gray50\"),        \n        legend.text = element_blank(),\n        legend.margin = margin(t = -65, ),\n        legend.spacing.x = unit(-1.8, \"mm\"),\n        legend.key = element_rect(fill = \"white\")        \n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nStorytelling with the chart\n\n\nIn general, the numbers of world heritage sites in Scandinavian countries have increased between 2004 and 2022. Sweden maintained its status as the country with the highest number of UNESCO World Heritage Sites throughout the period, underscoring its rich cultural and natural heritage. However, Denmark emerged as the front runner in terms of acquiring new designations, surpassing both Sweden and Norway in this aspect. Remarkably, Denmark saw a surge in the addition of UNESCO sites, particularly after 2004, contrasting with Sweden and Norway, which garnered most of their designations prior to that year."
  }
]